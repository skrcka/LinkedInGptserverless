service: ${file(config-${self:provider.environment.stage_name}.json):service_name} # NOTE: Don't put the word "google" in here

provider:
  name: google
  stage: ${opt:stage, 'dev'}
  runtime: python310
  region: ${file(config-${self:provider.environment.stage_name}.json):region}
  project: ${file(config-${self:provider.environment.stage_name}.json):project_id}
  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:
  # https://serverless.com/framework/docs/providers/google/guide/credentials/
  #
  credentials: keyfile-${self:provider.environment.stage_name}.json
  # if you encounter timeout error when deploy, you can try to increase timeout
  timeout: 120s

  environment:
    stage_name: ${self:provider.stage}

plugins:
  - serverless-google-cloudfunctions
  - serverless-plugin-scripts

# needs more granular excluding in production as only the serverless provider npm
# package should be excluded (and not the whole node_modules directory)
package:
  patterns:
    - '!node_modules/**'
    - '!.gitignore'
    - '!.git/**'
    - '!.vscode'
    - '!.idea/**'
    - '!*env/**'
    - '!__pycache__/**'

custom:
  scripts:
    hooks:
      'deploy:finalize': ./JobManager.py ${self:provider.environment.stage_name}

functions:
  early_request_to_report:
    name: early_request_to_report
    handler: early_request_to_report
    allowUnauthenticated: true
    events:
      - http: path
  request_for_report:
    name: request_for_report
    handler: request_for_report
    events:
      - http: path
  report_request_buttons:
    name: report_request_buttons
    handler: report_request_buttons
    allowUnauthenticated: true
    events:
      - http: path
  sumarize_reports:
    name: sumarize_reports
    handler: sumarize_reports
    events:
      - http: path
  report_reminder:
    name: report_reminder
    handler: report_reminder
    events:
      - http: path
# you can define resources, templates etc. the same way you would in a
# Google Cloud deployment configuration
#resources:
#  resources:
#    - type: storage.v1.bucket
#      name: my-serverless-service-bucket
#  imports:
#    - path: my_template.jinja